h2. XMLRPC Cloud API DOC - clouduser

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.clouduser.listJobs(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of jobs the cloud user executed.

        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :     guid of the cloud user
                * Jobguid (guid) :           guid of the job if avalailable else empty string
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.listJobs(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of machines for the cloud user.
Return type : dictionary
    {noformat}
    h3.clouduser.listGroups(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Returns the list of groups to which a given clouduser belongs.
 
        
    
    

    h4.  Parameters
    

                * Clouduserguid () :     guid of the cloud user for which to retrieve the list of groups to which this user belongs.
                * Jobguid () :           guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.listGroups(clouduserguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with clouduserguid, login, email, firstname, lastname, cloudusergroupguid, name, description.
Return type : dictionary
    {noformat}
    h3.clouduser.getXMLSchema(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the cloud user rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.clouduser.generateCertificate(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Generates a certificate for the cloud user specified.
        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :         guid of the cloud user specified
                * Jobguid (guid) :               guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.generateCertificate(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.create(login, password, email, firstname, lastname, name, description, systemUser, jobguid, executionparams)

    h4. Description
    
    
        Creates a new cloud user        
        
        
    
    

    h4.  Parameters
    

                * Login (string) :                Login for this new cloud user
                * Password (string) :             Password for this new cloud user
                * Email (string) :                Email address for this new cloud user
                * Firstname (string) :            Firstname for this new cloud user
                * Lastname (string) :             Lastname for this new cloud user
                * Name (string) :                 Name for this new cloud user
                * Description (string) :          Description for this new cloud user
                * Systemuser (boolean) :           Indicates if this user is system user
                * Jobguid (guid) :              guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.create(login=<string>,password=<string>,email=<string>,firstname=<string>,lastname=<string>,name=<string>,description=<string>,systemUser=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with cloud user guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.list(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of cloud users.
        
    
    

    h4.  Parameters
    

                * Clouduserguid () :      guid of the cloud user specified
                * Jobguid () :            guid of the job if avalailable else empty string
                * Executionparams () :    dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.list(clouduserguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with guid, login, name, description, firstname, lastname, address, city, country and status for cloud user.
Return type : dictionary
    {noformat}
    h3.clouduser.listStatuses(jobguid, executionparams)

    h4. Description
    
    
        Returns a list of possible cloud user statuses.

        
    
    

    h4.  Parameters
    

                * Jobguid () :           guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.listStatuses(jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of statuses.
Return type : dictionary
    {noformat}
    h3.clouduser.getYAML(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the cloud user rootobject.

        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :             guid of the cloud user rootobject
                * Jobguid (guid) :                   guid of the job if avalailable else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.getYAML(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the cloud user
Return type : string
    {noformat}
    h3.clouduser.setAdminFlag(clouduserguid, isAdmin, jobguid, executionparams)

    h4. Description
    
    
        Updates the admin flag for the cloud user specified.
        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :         guid of the cloud user specified
                * Isadmin (boolean) :               Admin flag value for this cloud user, default is False.
                * Jobguid (guid) :               guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.setAdminFlag(clouduserguid=<guid>,isAdmin=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :     guid of the lan rootobject
                * Jobguid () : <no description found>
                * Executionparams (dictionary) :    dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.clouduser.listMachines(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of machines of the cloud user.

        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :     guid of the cloud user
                * Jobguid (guid) :           guid of the job if avalailable else empty string
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.listMachines(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of machines for the cloud user.
Return type : dictionary
    {noformat}
    h3.clouduser.updateModelProperties(clouduserguid, name, description, email, firstname, lastname, address, city, country, phonemobile, phonelandline, jobguid, executionparams)

    h4. Description
    
    
        Update properties, every parameter which is not passed or passed as empty string is not updated.
        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :         guid of the cloud user specified
                * Name (string) :                  Name for this cloud user
                * Description (string) :           Description for this cloud user
                * Email (string) :                 Email for this cloud user
                * Firstname (string) :             Firstname for this cloud user
                * Lastname (string) :              Lastname for this cloud user
                * Address (string) :               Address for this cloud user
                * City (string) :                  City for this cloud user
                * Country (string) :               Country for this cloud user
                * Phonemobile (string) :           Phonemobile for this cloud user
                * Phonelandline (string) :         Phonelandline for this cloud user
                * Jobguid (guid) :               guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.updateModelProperties(clouduserguid=<guid>,name=<string>,description=<string>,email=<string>,firstname=<string>,lastname=<string>,address=<string>,city=<string>,country=<string>,phonemobile=<string>,phonelandline=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with cloud user guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.listDatacenters(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of datacenters of the cloud user.

        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :     guid of the cloud user
                * Jobguid (guid) :           guid of the job if avalailable else empty string
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.listDatacenters(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of datacenters for the cloud user.
Return type : dictionary
    {noformat}
    h3.clouduser.updatePassword(clouduserguid, currentpassword, newpassword, jobguid, executionparams)

    h4. Description
    
    
        Update the password for the cloud user specified.
        
        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :         guid of the cloud user specified
                * Currentpassword (string) :       Current password for this cloud user
                * Newpassword (string) :           New password for this cloud user
                * Jobguid (guid) :               guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.updatePassword(clouduserguid=<guid>,currentpassword=<string>,newpassword=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.getXML(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the cloud user rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.clouduser.setStatus(clouduserguid, status, jobguid, executionparams)

    h4. Description
    
    
        Updates the admin flag for the cloud user specified.
        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :         guid of the cloud user specified
                * Status (string) :                Status for the cloud user specified. See listStatuses() for the list of possible statuses.
                * Jobguid (guid) :               guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.setStatus(clouduserguid=<guid>,status=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.clouduser.find(login, email, name, status, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of cloud user guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Login () :                    Login of  the cloud user to include in the search criteria.
                * Email () :                    Email of  the cloud user to include in the search criteria.
                * Name () :                     Name of the cloud user to include in the search criteria.
                * Status () :                   Status of the cloud user to include in the search criteria. See listStatuses().
                * Jobguid () :                  guid of the job if avalailable else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.find(login=<>,email=<>,name=<>,status=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of cloud user guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.clouduser.delete(clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Deletes the cloud user specified.

        
    
    

    h4.  Parameters
    

                * Clouduserguid (guid) :             guid of the cloud user to delete.
                * Jobguid (guid) :                   guid of the job if avalailable else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_clouduser.delete(clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
