h2. XMLRPC Cloud API DOC - customer

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.customer.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :     Guid of the lan rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.customer.removeCapacityAvailable(customerguid, capacityunittype, jobguid, executionparams)

    h4. Description
    
    
        Removes available capacity for the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Guid of the customer specified
                * Capacityunittype (string) :      Type of capacity units to remove. See capacityplanning.listCapacityUnitTypes()
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.removeCapacityAvailable(customerguid=<guid>,capacityunittype=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.listCapacity(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of capacity units available and consumed for the given customer.
        
        
    
    

    h4.  Parameters
    

                * Customerguid () :      Guid of the customer for which to retrieve the list of capacity units
                * Jobguid () :           Guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.listCapacity(customerguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with customerguid, login, email, firstname, lastname, array of available capacity, array of consumed capacity.
Return type : dictionary
    {noformat}
    h3.customer.find(name, status, resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of customer guids which meet the search criteria.

        
    
    

    h4.  Parameters
    

                * Name () :                     Name of the customer to include in the search criteria.
                * Status () :                   Status of the customer to include in the search criteria. See listStatuses().
                * Resourcegroupguid () :        Guid of the resourcegroup of the customer
                * Jobguid () :                  Guid of the job if avalailable else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.find(name=<>,status=<>,resourcegroupguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of customer guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.customer.unregisterDomain(customerguid, username, password, domain, jobguid, executionparams)

    h4. Description
    
    
        Unregisters a domain for a customer
        
        
    
    

    h4.  Parameters
    

                * Customerguid () :        Guid of the customer unregistering the domain
                * Username () :            ITPS portal username
                * Password () :            ITPS portal password
                * Domain () :              Domain to unregister
                * Jobguid (guid) :            Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :    Dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.unregisterDomain(customerguid=<>,username=<>,password=<>,domain=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.create(name, resourcegroupguid, description, address, city, country, jobguid, executionparams)

    h4. Description
    
    
        Creates a new customer

        
    
    

    h4.  Parameters
    

                * Name (string) :                 Name for this new customer
                * Resourcegroupguid (guid) :    Guid of the resource group related to this customer
                * Description (string) :          Description for this new customer
                * Address (string) :              Address for this new customer
                * City (string) :                 City for this new customer
                * Country (string) :              Country for this new customer
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.create(name=<string>,resourcegroupguid=<guid>,description=<string>,address=<string>,city=<string>,country=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with customer guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.setStatus(customerguid, status, jobguid, executionparams)

    h4. Description
    
    
        Updates the status of the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Guid of the customer specified
                * Status (string) :                Status for the customer specified. See listStatuses() for the list of possible statuses.
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.setStatus(customerguid=<guid>,status=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.updateModelProperties(customerguid, name, description, address, city, country, retentionpolicyguid, jobguid, executionparams)

    h4. Description
    
    
        Update properties, every parameter which is not passed or passed as empty string is not updated.
        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Guid of the customer specified
                * Name (string) :                  Name for this customer
                * Description (string) :           Description for this customer
                * Address (string) :               Address for this customer
                * City (string) :                  City for this customer
                * Country (string) :               Country for this customer
                * Retentionpolicyguid (guid) :   Guid of the retention policy for snapshots
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.updateModelProperties(customerguid=<guid>,name=<string>,description=<string>,address=<string>,city=<string>,country=<string>,retentionpolicyguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with customer guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.listCloudSpaces(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of cloudspaces for the customer.

        
    
    
        {note} Not yet implemented {note}
    h3.customer.addCloudUserGroup(customerguid, cloudusergroupguid, jobguid, executionparams)

    h4. Description
    
    
        Adds a cloud user group to the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Gui of the customer specified
                * Cloudusergroupguid (guid) :    Guid of the cloud user group specified
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.addCloudUserGroup(customerguid=<guid>,cloudusergroupguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.registerDomain(customerguid, username, password, domain, jobguid, executionparams)

    h4. Description
    
    
        Registers a domain for a customer
        
        
    
    

    h4.  Parameters
    

                * Customerguid () :        Guid of the customer registering the domain
                * Username () :            ITPS portal username
                * Password () :            ITPS portal password
                * Domain () :              Domain to register
                * Jobguid (guid) :            Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :    Dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.registerDomain(customerguid=<>,username=<>,password=<>,domain=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.listGroups(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of cloud user groups for a given customer.
        
        
    
    

    h4.  Parameters
    

                * Customerguid () :      Guid of the customer for which to retrieve the list of groups to which this user belongs.
                * Jobguid () :           Guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.listGroups(customerguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with customerguid, login, email, firstname, lastname, cloudusergroupguid, name, description.
Return type : dictionary
    {noformat}
    h3.customer.removeCloudUserGroup(customerguid, cloudusergroupguid, jobguid, executionparams)

    h4. Description
    
    
        Removes a cloud user group for the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Gui of the customer specified
                * Cloudusergroupguid (guid) :    Guid of the cloud user group specified
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.removeCloudUserGroup(customerguid=<guid>,cloudusergroupguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.getXML(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the customer rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.customer.removeCapacityConsumed(customerguid, capacityunittype, jobguid, executionparams)

    h4. Description
    
    
        Removes consumed capacity for the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Guid of the customer specified
                * Capacityunittype (string) :      Type of capacity units to remove. See capacityplanning.listCapacityUnitTypes()
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.removeCapacityConsumed(customerguid=<guid>,capacityunittype=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.addCapacityConsumed(customerguid, amount, capacityunittype, name, description, jobguid, executionparams)

    h4. Description
    
    
        Adds consumed capacity for the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Guid of the customer specified
                * Amount (integer) :                Amount of capacity units to add
                * Capacityunittype (string) :      Type of capacity units to add. See capacityplanning.listCapacityUnitTypes()
                * Name (string) :                  Name of capacity units to add.
                * Description () :           Description of capacity units to add.
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.addCapacityConsumed(customerguid=<guid>,amount=<integer>,capacityunittype=<string>,name=<string>,description=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.addCapacityAvailable(customerguid, amount, capacityunittype, name, description, jobguid, executionparams)

    h4. Description
    
    
        Adds available capacity for the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :          Gui of the customer specified
                * Amount (integer) :                Amount of capacity units to add
                * Capacityunittype (string) :      Type of capacity units to add. See capacityplanning.listCapacityUnitTypes()
                * Name (string) :                  Name of capacity units to add.
                * Description () :           Description of capacity units to add.
                * Jobguid (guid) :               Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.addCapacityAvailable(customerguid=<guid>,amount=<integer>,capacityunittype=<string>,name=<string>,description=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.customer.getXMLSchema(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the customer rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.customer.list(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of customers.
        
    
    

    h4.  Parameters
    

                * Customerguid () :      Guid of the customer specified
                * Jobguid () :           Guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.list(customerguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with guid, name, description, address, city, country and status for customer.
Return type : dictionary
    {noformat}
    h3.customer.getYAML(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the customer rootobject.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :              Guid of the customer rootobject
                * Jobguid (guid) :                   Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.getYAML(customerguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the customer
Return type : string
    {noformat}
    h3.customer.listStatuses(jobguid, executionparams)

    h4. Description
    
    
        Returns a list of possible customer statuses.

        
    
    

    h4.  Parameters
    

                * Jobguid () :           Guid of the job if avalailable else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.listStatuses(jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of statuses.
Return type : dictionary
    {noformat}
    h3.customer.delete(customerguid, jobguid, executionparams)

    h4. Description
    
    
        Deletes the customer specified.

        
    
    

    h4.  Parameters
    

                * Customerguid (guid) :              Guid of the customer to delete.
                * Jobguid (guid) :                   Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_customer.delete(customerguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
