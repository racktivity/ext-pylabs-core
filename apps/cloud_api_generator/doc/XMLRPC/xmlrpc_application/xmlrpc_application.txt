h2. XMLRPC Cloud API DOC - application

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.application.listVdcs(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        List the vdcs the application is used in.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :    guid of the application to list the vdcs for.
                * Jobguid (guid) :            guid of the job if available else empty string
                * Executionparams (dictionary) :    dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.listVdcs(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with guid, name, description, status, template, applicationtemplateguid, machineguid, machinename, cloudspaceguid, cloudspacename of the application.
Return type : dictionary
    {noformat}
    h3.application.restore(sourceapplicationguid, destinationapplicationguid, jobguid, executionparams)

    h4. Description
    
    
        
    
    
        {note} Not yet implemented {note}
    h3.application.removeNetworkService(applicationguid, servicename, jobguid, executionparams)

    h4. Description
    
    
        Removes a network service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of network service .
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeNetworkService(applicationguid=<guid>,servicename=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.removeService(applicationguid, servicename, jobguid, executionparams)

    h4. Description
    
    
        Removes a service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service .
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeService(applicationguid=<guid>,servicename=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.exists(templatename, machineguid, customer, jobguid, executionparams)

    h4. Description
    
    
        Returns a dict with following key/value pairs: templateguid, applicationguid, machineguid
        which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Templatename (string) :           name of the parent template to include in the search criteria.
                * Machineguid (guid) :            guid of the machine to include in the search criteria.
                * Customer (boolean) :               Flag whether the application is system or customer application
                * Jobguid (guid) :                guid of the job if available else empty string
                * Executionparams (dictionary) :        dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.exists(templatename=<string>,machineguid=<guid>,customer=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dict of which met the find criteria specified.
Return type : array
    {noformat}
    h3.application.revokeServiceToDevice(applicationguid, servicename, deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the device specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Deviceguid (guid) :            guid of the device to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToDevice(applicationguid=<guid>,servicename=<string>,deviceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.listAccountTypes(jobguid, executionparams)

    h4. Description
    
    
        Returns a list of possible application account types.

        
    
    

    h4.  Parameters
    

                * Jobguid () :           guid of the job if available else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.listAccountTypes(jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of application account types.
Return type : dictionary
    {noformat}
    h3.application.listMonitoringInfo(machineguid, jobguid, executionparams)

    h4. Description
    
    
        Retrieve application monitoring info used for the given machine

        
    
    

    h4.  Parameters
    

                * Machineguid (guid) :         guid of the machineguid running the application
                * Jobguid (guid) :             guid of the job if available else empty string
                * Executionparams (dictionary) :     dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.listMonitoringInfo(machineguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with  application, port, ipaddress
Return type : dictionary
    {noformat}
    h3.application.getChildApplications(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Retrieve application template used to create the given application
        
        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :     guid of the parent application
                * Jobguid (guid) :             guid of the job if available else empty string
                * Executionparams (dictionary) :     dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getChildApplications(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with applicationtemplate guid and applicationtemplate name as result and jobguid: {'result': {'guid':'58aef606-d30c-4ac4-b79c-f2ea955011f9', 'name':'dhcpserver'}, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :     guid of the lan rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.application.initialize(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Performs initialization actions on the application specified. As a result the application will be ready to be used.
        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.initialize(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.revokeServiceToNetworkZone(applicationguid, servicename, networkzoneguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the network zone specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Networkzoneguid (guid) :       guid of the network zone to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToNetworkZone(applicationguid=<guid>,servicename=<string>,networkzoneguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addCapacityProvided(applicationguid, amount, capacityunittype, name, description, jobguid, executionparams)

    h4. Description
    
    
        Adds provided capacity for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Amount (integer) :                Amount of capacity units to add
                * Capacityunittype (string) :      Type of capacity units to add. See capacityplanning.listCapacityUnitTypes()
                * Name (string) :                  Name of capacity units to add.
                * Description () :           Description of capacity units to add.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addCapacityProvided(applicationguid=<guid>,amount=<integer>,capacityunittype=<string>,name=<string>,description=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addAccount(applicationguid, login, password, accounttype, jobguid, executionparams)

    h4. Description
    
    
        Adds an account for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Login (string) :                     Login for the new  account.
                * Password (string) :                  Password for the new account.
                * Accounttype (string) :               Type for the new account. See listAccountTypes().
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addAccount(applicationguid=<guid>,login=<string>,password=<string>,accounttype=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.find(cloudspaceguid, machineguid, name, status, istemplate, customer, mode, monitor, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of application guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Cloudspaceguid () :           Guid of the cloudspace to include in the search criteria.
                * Machineguid () :              Guid of the machine to include in the search criteria.
                * Name () :                     Name of the application to include in the search criteria.
                * Status () :                   Status of the  application to include in the search criteria. See listStatuses().
                * Istemplate () :               Indicate if the application is a template
                * Customer () :                 Flag whether the application is system or customer application
                * Mode () :                     Mode of the application (eg readonly...)
                * Monitor () :                  Monitor flag
                * Jobguid () :                  guid of the job if available else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.find(cloudspaceguid=<>,machineguid=<>,name=<>,status=<>,istemplate=<>,customer=<>,mode=<>,monitor=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of application guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.application.offerServiceToApplication(applicationguid, servicename, destinationapplicationguid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :             guid of the application specified
                * Servicename (string) :                 Name of service to add. Name must be unique!
                * Destinationapplicationguid (guid) :  guid of the application to which to offer the service specified
                * Remark () :                      Remark to add to this service offer.
                * Jobguid (guid) :                     guid of the job if available else empty string
                * Executionparams (dictionary) :             dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToApplication(applicationguid=<guid>,servicename=<string>,destinationapplicationguid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.createFromTemplate(cloudspaceguid, machineguid, applicationtemplateguid, name, description, customsettings, customer, jobguid, executionparams)

    h4. Description
    
    
        Creates a new application, does not provision application yet

        
    
    

    h4.  Parameters
    

                * Cloudspaceguid (guid) :                    guid of the cloud space related to this application
                * Machineguid (guid) :                       guid of the machine related to this application
                * Applicationtemplateguid (guid) :           guid of the applicationtemplate to create this application from
                * Name (string) :                              Name for this new application. The name is a freely chosen name, which has to be unique in SPACE.
                * Description (string) :                       Description for this new application. This is free text describing the purpose of the application, if multi-line use back-slash +
                * Customsettings (string) :                    Custom settings for this new application.
                * Customer (boolean) :                          Flag whether the application is system or customer application
                * Jobguid (guid) :                           guid of the job if available else empty string
                * Executionparams (dictionary) :                   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.createFromTemplate(cloudspaceguid=<guid>,machineguid=<guid>,applicationtemplateguid=<guid>,name=<string>,description=<string>,customsettings=<string>,customer=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with application guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.copy(sourceapplicationguid, destinationapplicationguid, jobguid, executionparams)

    h4. Description
    
    
        Copies the application specified.

        
    
    
        {note} Not yet implemented {note}
    h3.application.offerServiceToDevice(applicationguid, servicename, deviceguid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the device specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Deviceguid (guid) :            guid of the device to which to offer the service specified
                * Remark () :                Remark to add to this service offer.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToDevice(applicationguid=<guid>,servicename=<string>,deviceguid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.reload(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Reloads the specified application 

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :   Guid of the application
                * Jobguid (guid) :           Guid of the job
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.reload(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.removeCapacityProvided(applicationguid, capacityunittype, jobguid, executionparams)

    h4. Description
    
    
        Removes provided capacity for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Capacityunittype (string) :      Type of capacity units to remove. See capacityplanning.listCapacityUnitTypes()
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeCapacityProvided(applicationguid=<guid>,capacityunittype=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.create(cloudspaceguid, name, machineguid, parentapplicactionguid, description, customsettings, customer, mode, jobguid, executionparams)

    h4. Description
    
    
        Creates a new application, does not provision application yet
        Application does not have to be linked to a machine.
        An application can group other applications, these are called cloudservices

        
    
    

    h4.  Parameters
    

                * Cloudspaceguid (guid) :          guid of the cloud space related to this application
                * Name (string) :                    Name for this new application. The name is a freely chosen name, which has to be unique in SPACE.
                * Machineguid (guid) :             guid of the machine related to this application
                * Parentapplicactionguid (guid) :  link to application which is cloudservice (modelled as parent application)
                * Description (string) :             Description for this new application. This is free text describing the purpose of the application, if multi-line use back-slash +
                * Customsettings (string) :          Custom settings for this new application.
                * Customer (boolean) :                Flag whether the application is system or customer application
                * Mode (string) :                    configuration mode (READONLY,READWRITE...)
                * Jobguid (guid) :                 guid of the job if available else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.create(cloudspaceguid=<guid>,name=<string>,machineguid=<guid>,parentapplicactionguid=<guid>,description=<string>,customsettings=<string>,customer=<boolean>,mode=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with application guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getStatus(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Retrieve status of the given application
        
        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :   Guid of the application
                * Jobguid (guid) :           Guid of the job
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getStatus(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.revokeServiceToCloudUser(applicationguid, servicename, clouduserguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the cloud user specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Clouduserguid (guid) :         guid of the cloud user to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToCloudUser(applicationguid=<guid>,servicename=<string>,clouduserguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.start(applicationguid, failifnotenoughresource, jobguid, executionparams)

    h4. Description
    
    
        Starts the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Failifnotenoughresource (boolean) :   Boolean value indicating if application should not start if not enough resources are available.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.start(applicationguid=<guid>,failifnotenoughresource=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.updateModelProperties(applicationguid, name, description, status, customsettings, customer, mode, monitor, jobguid, executionparams)

    h4. Description
    
    
        Update properties, every parameter which is not passed or passed as empty string is not updated.
        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Name (string) :                  Name for this application
                * Description (string) :           Description for this application
                * Status (string) :                Status for this application
                * Customsettings (string) :        Custom settings for this application
                * Customer (boolean) :              Flag whether the application is system or customer application
                * Mode (string) :                  Mode of the application (eg readonly...)
                * Monitor (boolean) :               Monitor flag
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.updateModelProperties(applicationguid=<guid>,name=<string>,description=<string>,status=<string>,customsettings=<string>,customer=<boolean>,mode=<string>,monitor=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with application guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.revokeServiceToDisk(applicationguid, servicename, diskguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the disk specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Diskguid (guid) :              guid of the disk to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToDisk(applicationguid=<guid>,servicename=<string>,diskguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getApplicationTemplate(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Retrieve application template used to create the given application

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getApplicationTemplate(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with applicationtemplate guid and applicationtemplate name as result and jobguid: {'result': {'guid':'58aef606-d30c-4ac4-b79c-f2ea955011f9', 'name':'dhcpserver'}, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.offerServiceToLan(applicationguid, servicename, languid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the lan specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Languid (guid) :               guid of the lan to which to offer the service specified
                * Remark () :                Remark to add to this service offer.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToLan(applicationguid=<guid>,servicename=<string>,languid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.offerServiceToMachine(applicationguid, servicename, machineguid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for machine lan specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Machineguid (guid) :           guid of the machine to which to offer the service specified
                * Remark () :                Remark to add to this service offer.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToMachine(applicationguid=<guid>,servicename=<string>,machineguid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getNetworkServicePorts(applicationguid, networkservicename, jobguid, executionparams)

    h4. Description
    
    
        Retrieve information about the networkserviceports for the given application
        
        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :        guid of the application
                * Networkservicename (string) :     name of the network service
                * Jobguid (guid) :                guid of the job if available else empty string
                * Executionparams (dictionary) :        dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getNetworkServicePorts(applicationguid=<guid>,networkservicename=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary
Return type : dictionary
    {noformat}
    h3.application.moveToMachine(applicationguid, machineguid, jobguid, executionparams)

    h4. Description
    
    
        Copies the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :                   guid of the application to move.
                * Machineguid (guid) :                       guid of the machine to which we want to move this application.
                * Jobguid (guid) :                           guid of the job if available else empty string
                * Executionparams (dictionary) :                   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.moveToMachine(applicationguid=<guid>,machineguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with the True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.offerServiceToCloudUser(applicationguid, servicename, clouduserguid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the cloud user specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Clouduserguid (guid) :         guid of the disk to which to offer the service specified
                * Remark () :                Remark to add to this service offer.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToCloudUser(applicationguid=<guid>,servicename=<string>,clouduserguid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addNetworkService(applicationguid, name, description, enabled, monitored, ipaddressguids, jobguid, executionparams)

    h4. Description
    
    
        Adds a new service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Name (string) :                  Name of network service to add. Name must be unique!
                * Description (string) :           Description of network service to add.
                * Enabled (bool) :               Is this network service enabled.
                * Monitored (bool) :             Should this network service be monitored.
                * Ipaddressguids (list) :        ip addresses linked to this service only, null if not specific to this service, link to guid of ip address as used in machine.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addNetworkService(applicationguid=<guid>,name=<string>,description=<string>,enabled=<bool>,monitored=<bool>,ipaddressguids=<list>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.stop(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Stops the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.stop(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.removeAccount(applicationguid, login, accounttype, jobguid, executionparams)

    h4. Description
    
    
        Removes an account for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Login (string) :                     Login of the account to remove.
                * Accounttype () : <no description found>
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeAccount(applicationguid=<guid>,login=<string>,accounttype=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.disable(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Disables the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.disable(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addService(applicationguid, name, description, jobguid, executionparams)

    h4. Description
    
    
        Adds a new service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Name (string) :                  Name of service to add. Name must be unique!
                * Description () :           Description of service to add.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addService(applicationguid=<guid>,name=<string>,description=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getXML(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the application rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.application.importFromURI(applicationguid, sourceuri, executormachineguid, jobguid, executionparams)

    h4. Description
    
    
        Imports an application from the source location specified.
        Export rootobject info

        
    
    
        {note} Not yet implemented {note}
    h3.application.getAgentsForCloudService(cloudservicename, applicationtype, jobguid, executionparams)

    h4. Description
    
    
        return guids of agents off applications of cloudservice (when applicatyupename is specified only one specific applicationtype part of cloudservice)
        e.g. getAgentsForCloudServiceApplication("dsssstore","storagedaemon") will return a list of all storagedaemonAgents
        
        
    
    
        {note} Not yet implemented {note}
    h3.application.revokeServiceToApplication(applicationguid, servicename, destinationapplicationguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :             guid of the application specified
                * Servicename (string) :                 Name of service to revoke. Name must be unique!
                * Destinationapplicationguid (guid) :  guid of the application to which to revoke the service specified
                * Jobguid (guid) :                     guid of the job if available else empty string
                * Executionparams (dictionary) :             dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToApplication(applicationguid=<guid>,servicename=<string>,destinationapplicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.restart(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Restart the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.restart(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.listNetworkServices(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of network services for an application.

        
    
    

    h4.  Parameters
    

                * Applicationguid () :       guid of the application specified
                * Jobguid () :               guid of the job if available else empty string
                * Executionparams () :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.listNetworkServices(applicationguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of network services.
Return type : dictionary
    {noformat}
    h3.application.removeCapacityConsumed(applicationguid, capacityunittype, jobguid, executionparams)

    h4. Description
    
    
        Removes consumed capacity for the customer specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Capacityunittype (string) :      Type of capacity units to remove. See capacityplanning.listCapacityUnitTypes()
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeCapacityConsumed(applicationguid=<guid>,capacityunittype=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addCapacityConsumed(applicationguid, amount, capacityunittype, name, description, jobguid, executionparams)

    h4. Description
    
    
        Adds consumed capacity for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the customer specified
                * Amount (integer) :                Amount of capacity units to add
                * Capacityunittype (string) :      Type of capacity units to add. See capacityplanning.listCapacityUnitTypes()
                * Name (string) :                  Name of capacity units to add.
                * Description () :           Description of capacity units to add.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addCapacityConsumed(applicationguid=<guid>,amount=<integer>,capacityunittype=<string>,name=<string>,description=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.uninstall(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Uninstalls the application specified

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :   Guid of the application
                * Jobguid (guid) :           Guid of the job
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.uninstall(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.addNetworkServicePort(applicationguid, servicename, portnr, protocoltype, ipaddress, monitor, jobguid, executionparams)

    h4. Description
    
    
        Adds a network service port for the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of network service .
                * Portnr (int) :                Port of network service .
                * Protocoltype (string) :          Protocol type (applicationipprotocoltype)
                * Ipaddress (string) :             IP address to which port is bound to
                * Monitor (bool) :               Should this port be monitored
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.addNetworkServicePort(applicationguid=<guid>,servicename=<string>,portnr=<int>,protocoltype=<string>,ipaddress=<string>,monitor=<bool>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getAgentForApplicationTypeService(machineguid, applicationtype, jobguid, executionparams)

    h4. Description
    
    
        return guid of agent which serves specified applicationtype to this machine
        e.g. getAgentForService([machineguid of a machine],"dssdirector") will return the agent of the dssdirector
        
        
    
    
        {note} Not yet implemented {note}
    h3.application.exportToURI(applicationguid, destinationuri, executormachineguid, compressed, imagetype, jobguid, executionparams)

    h4. Description
    
    
        Exports specified application (is a backup) to a remote destination.
        These are very application specific workflows
        Export rootobject info

        
    
    
        {note} Not yet implemented {note}
    h3.application.list(cloudspaceguid, machineguid, applicationguid, status, customer, istemplate, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of applications.
        
    
    

    h4.  Parameters
    

                * Cloudspaceguid () :     guid of the cloudspace if available else empty string
                * Machineguid () :        guid of the application if available else empty string
                * Applicationguid () :    guid of the application if available else empty string
                * Status () :             status of the application to include in the search criteria.
                * Customer () :           Flag whether the application is system or customer application
                * Istemplate () :         Flag whether the application is template application
                * Jobguid () :            guid of the job if available else empty string
                * Executionparams () :    dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.list(cloudspaceguid=<>,machineguid=<>,applicationguid=<>,status=<>,customer=<>,istemplate=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with guid, name, description, status, template, applicationtemplateguid, machineguid, machinename, cloudspaceguid, cloudspacename of the application.
Return type : dictionary
    {noformat}
    h3.application.offerServiceToNetworkZone(applicationguid, servicename, networkzoneguid, remark, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the network zone specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Networkzoneguid (guid) :       guid of the network zone to which to offer the service specified
                * Remark () :                Remark to add to this service offer.
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToNetworkZone(applicationguid=<guid>,servicename=<string>,networkzoneguid=<guid>,remark=<>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getYAML(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the application rootobject.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :    guid of the lan rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getYAML(applicationguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the disk
Return type : string
    {noformat}
    h3.application.revokeServiceToMachine(applicationguid, servicename, machineguid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the machine specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Machineguid (guid) :           guid of the machine to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToMachine(applicationguid=<guid>,servicename=<string>,machineguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getXMLSchema(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the application rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.application.listStatuses(jobguid, executionparams)

    h4. Description
    
    
        Returns a list of possible application statuses.

        
    
    

    h4.  Parameters
    

                * Jobguid () :           guid of the job if available else empty string
                * Executionparams () :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.listStatuses(jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of statuses.
Return type : dictionary
    {noformat}
    h3.application.revokeServiceToLan(applicationguid, servicename, languid, jobguid, executionparams)

    h4. Description
    
    
        Revokes a service for the lan specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to revoke. Name must be unique!
                * Languid (guid) :               guid of the lan to which to revoke the service specified
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.revokeServiceToLan(applicationguid=<guid>,servicename=<string>,languid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.offerServiceToDisk(applicationguid, servicename, diskguid, remark, partitionorder, jobguid, executionparams)

    h4. Description
    
    
        Offers a service for the disk specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of service to add. Name must be unique!
                * Diskguid (guid) :              guid of the disk to which to offer the service specified
                * Remark (string) :                Remark to add to this service offer.
                * Partitionorder (int) :        number of partition serviced (eg mountpoints)
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.offerServiceToDisk(applicationguid=<guid>,servicename=<string>,diskguid=<guid>,remark=<string>,partitionorder=<int>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.getAgent(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        return guid of agent which serves the specified application (which is NOT part of cloudservice)
        
    
    

    h4.  Parameters
    

                * Applicationguid () : <no description found>
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.getAgent(applicationguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : 
Return type : 
    {noformat}
    h3.application.backup(applicationguid, destinationuri, compressed, login, password, jobguid, executionparams)

    h4. Description
    
    
        Creates a backup of the application (when needed a destination can be given)

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :   Guid of the application
                * Destinationuri (string) :    URI of the location where the backup should be stored. (e.g ftp://login:passwd@myhost.com/backups/applicationx/).
                * Compressed (boolean) :        If true backup will be zipped (compression = 7zip)
                * Login (string) :             Login credential on the destination machine
                * Password (string) :          Password on the destination machine
                * Jobguid (guid) :           guid of the job if available else empty string
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.backup(applicationguid=<guid>,destinationuri=<string>,compressed=<boolean>,login=<string>,password=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : 
Return type : 
    {noformat}
    h3.application.removeNetworkServicePort(applicationguid, servicename, portnr, jobguid, executionparams)

    h4. Description
    
    
        Removes a network service port from the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :       guid of the application specified
                * Servicename (string) :           Name of network service .
                * Portnr (int) :                Port of network service .
                * Jobguid (guid) :               guid of the job if available else empty string
                * Executionparams (dictionary) :       dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.removeNetworkServicePort(applicationguid=<guid>,servicename=<string>,portnr=<int>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.application.delete(applicationguid, jobguid, executionparams)

    h4. Description
    
    
        Deletes the application specified.

        
    
    

    h4.  Parameters
    

                * Applicationguid (guid) :           guid of the application to delete.
                * Jobguid (guid) :                   guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_application.delete(applicationguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
