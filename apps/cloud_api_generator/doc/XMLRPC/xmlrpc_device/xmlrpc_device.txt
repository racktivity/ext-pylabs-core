h2. XMLRPC Cloud API DOC - device

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.device.getXMLSchema(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the device rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.device.addPDisk(deviceguid, status, diskinterfacetype, deviceid, size, rpm, jobguid, executionparams)

    h4. Description
    
    
        Add pdisk to pdisks array of device
        
        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :           Guid of the device rootobject
                * Status (devicediskstatustype) :               status of disk
                * Diskinterfacetype (diskinterfacetype) :    interface type of pdisk
                * Deviceid (string) :             id of the pdisk
                * Size (integer) :                 size of pdisk
                * Rpm (integer) :                  rpm of pdisk
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.addPDisk(deviceguid=<guid>,status=<devicediskstatustype>,diskinterfacetype=<diskinterfacetype>,deviceid=<string>,size=<integer>,rpm=<integer>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with device guid as result and jobguid: {'result': deviceguid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.device.create(name, devicetype, description, template, rackguid, datacenterguid, racku, racky, rackz, modelnr, serialnr, firmware, lastcheck, status, parentdeviceguid, components, pdisks, nicports, powerports, lastrealitycheck, capacityunitsconsumed, capacityunitsprovided, accounts, cloudspaceguid, jobguid, executionparams)

    h4. Description
    
    
        Create a new device.

        
    
    

    h4.  Parameters
    

                * Name (string) : <no description found>
                * Devicetype (devicetype) :              device type
                * Description (type_description) : <no description found>
                * Template (bool) :                is template, when template used as example for an application
                * Rackguid (guid) :                guid of the rack to which the device belongs - can be None e.g. for devices in stock or in repair
                * Datacenterguid (guid) :  :        guid of the datacenter to which the device belongs - can be None e.g. for devices in stock or in repair
                * Racku (int) : <no description found>
                * Racky (int) :                   physical position of the device in a rack (y coordinate) measured in u slots. The position starts at bottom of rack, starting with 1
                * Rackz (int) : <no description found>
                * Modelnr (string(60)) : <no description found>
                * Serialnr (string(60)) : <no description found>
                * Firmware (string(60)) :                firmware identifier of the device
                * Lastcheck (type_date) :               last time device was inspected
                * Status (devicestatustype) : <no description found>
                * Parentdeviceguid (guid) :        parent device, e.g. blade belongs to bladechasis
                * Components (array(component)) :              list of components which are part of the device , do not use fo disks & nics
                * Pdisks (array(pdisk)) : <no description found>
                * Nicports (array(nicport)) : <no description found>
                * Powerports (array(powerport)) : <no description found>
                * Lastrealitycheck (type_date) : <no description found>
                * Capacityunitsconsumed (array(core.capacityplanning/capacityunit)) : <no description found>
                * Capacityunitsprovided (array(core.capacityplanning/capacityunit)) :   list of capacity units, provided
                * Accounts (array(account)) : <no description found>
                * Cloudspaceguid (guid) :          guid of the space to which this machine belongs
                * Jobguid (guid) :                 Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.create(name=<string>,devicetype=<devicetype>,description=<type_description>,template=<bool>,rackguid=<guid>,datacenterguid=<guid>,racku=<int>,racky=<int>,rackz=<int>,modelnr=<string(60)>,serialnr=<string(60)>,firmware=<string(60)>,lastcheck=<type_date>,status=<devicestatustype>,parentdeviceguid=<guid>,components=<array(component)>,pdisks=<array(pdisk)>,nicports=<array(nicport)>,powerports=<array(powerport)>,lastrealitycheck=<type_date>,capacityunitsconsumed=<array(core.capacityplanning/capacityunit)>,capacityunitsprovided=<array(core.capacityplanning/capacityunit)>,accounts=<array(account)>,cloudspaceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with deviceguid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.device.list(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        List all devices.

        
    
    

    h4.  Parameters
    

                * Deviceguid (guid</para><para>@security administrators) :               Guid of the device specified
                * Jobguid (guid) :                  Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.list(deviceguid=<guid</para><para>@security administrators>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with array of device info as result and jobguid: {'result': array, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.device.getYAML(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the device rootobject.

        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :             Guid of the device rootobject
                * Jobguid (guid) :                Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :        dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.getYAML(deviceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the device
Return type : string
    {noformat}
    h3.device.listPowerPorts(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Lists information about power ports of the device  
        
        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :           Guid of the device rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.listPowerPorts(deviceguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with device guid as result
Return type : dictionary
    {noformat}
    h3.device.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :         Guid of the device rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.device.updateModelProperties(deviceguid, name, devicetype, description, template, rackguid, datacenterguid, racku, racky, rackz, modelnr, serialnr, firmware, lastcheck, status, parentdeviceguid, components, pdisks, nicports, powerports, lastrealitycheck, capacityunitsconsumed, capacityunitsprovided, accounts, cloudspaceguid, jobguid, executionparams)

    h4. Description
    
    
        Update basic properties (every parameter which is not passed or passed as empty string is not updated)

        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :               Guid of the device specified
                * Name (string) : <no description found>
                * Devicetype (devicetype) :               device type
                * Description (type_description) : <no description found>
                * Template (bool) :                 is template, when template used as example for an application
                * Rackguid (guid) :                 guid of the rack to which the device belongs - can be None e.g. for devices in stock or in repair
                * Datacenterguid (guid) :  :         guid of the datacenter to which the device belongs - can be None e.g. for devices in stock or in repair
                * Racku (int) : <no description found>
                * Racky (int) :                    physical position of the device in a rack (y coordinate) measured in u slots. The position starts at bottom of rack, starting with 1
                * Rackz (int) : <no description found>
                * Modelnr (string(60)) : <no description found>
                * Serialnr (string(60)) : <no description found>
                * Firmware (string(60)) :                 firmware identifier of the device
                * Lastcheck (type_date) :                last time device was inspected
                * Status (devicestatustype) : <no description found>
                * Parentdeviceguid (guid) :         parent device, e.g. blade belongs to bladechasis
                * Components (array(component)) :               list of components which are part of the device , do not use fo disks & nics
                * Pdisks (array(pdisk)) : <no description found>
                * Nicports (array(nicport)) : <no description found>
                * Powerports (array(powerport)) : <no description found>
                * Lastrealitycheck (type_date) : <no description found>
                * Capacityunitsconsumed (array(core.capacityplanning/capacityunit)) : <no description found>
                * Capacityunitsprovided (array(core.capacityplanning/capacityunit)) :    list of capacity units, provided
                * Accounts (array(account)) : <no description found>
                * Cloudspaceguid (guid) :           guid of the space to which this machine belongs
                * Jobguid (guid) :                  Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.updateModelProperties(deviceguid=<guid>,name=<string>,devicetype=<devicetype>,description=<type_description>,template=<bool>,rackguid=<guid>,datacenterguid=<guid>,racku=<int>,racky=<int>,rackz=<int>,modelnr=<string(60)>,serialnr=<string(60)>,firmware=<string(60)>,lastcheck=<type_date>,status=<devicestatustype>,parentdeviceguid=<guid>,components=<array(component)>,pdisks=<array(pdisk)>,nicports=<array(nicport)>,powerports=<array(powerport)>,lastrealitycheck=<type_date>,capacityunitsconsumed=<array(core.capacityplanning/capacityunit)>,capacityunitsprovided=<array(core.capacityplanning/capacityunit)>,accounts=<array(account)>,cloudspaceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with device guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.device.getXML(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the device rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.device.addNic(deviceguid, status, nicporttype, name, sequence, hwaddr, backplaneguid, cableguid, jobguid, executionparams)

    h4. Description
    
    
        Add nicport property
        
        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :         Guid of the device rootobject
                * Status (nicportstatustype) :             status of nicport
                * Nicporttype (nicporttype) :        hardware type of nicport
                * Name (string) :               name of the nic port
                * Sequence (integer) :           sequence of nic port
                * Hwaddr (string) :             hardware address like macaddr
                * Backplaneguid (guid) :      backplane to which the nicport is connected
                * Cableguid (guid) :          cable to which the nicport is connected
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.addNic(deviceguid=<guid>,status=<nicportstatustype>,nicporttype=<nicporttype>,name=<string>,sequence=<integer>,hwaddr=<string>,backplaneguid=<guid>,cableguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with device guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.device.find(name, macaddress, status, devicetype, description, template, modelnr, serialnr, firmware, rackguid, datacenterguid, parentdeviceguid, cloudspaceguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of device guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Name () : <no description found>
                * Macaddress () : <no description found>
                * Status () : <no description found>
                * Devicetype () :                 Device type
                * Description () : <no description found>
                * Template () :                   Is template, when template used as example for an application
                * Modelnr () : <no description found>
                * Serialnr () : <no description found>
                * Firmware () :                   Firmware identifier of the device
                * Rackguid () :                   Guid of the rack to which the device belongs - can be None e.g. for devices in stock or in repair
                * Datacenterguid () :  :           Guid of the datacenter to which the device belongs - can be None e.g. for devices in stock or in repair
                * Parentdeviceguid () :           Guid of the parent device, e.g. blade belongs to bladechasis
                * Cloudspaceguid () :             Guid of the space to which this machine belongs
                * Jobguid () :                    Guid of the job if avalailable else empty string
                * Executionparams () :            dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.find(name=<>,macaddress=<>,status=<>,devicetype=<>,description=<>,template=<>,modelnr=<>,serialnr=<>,firmware=<>,rackguid=<>,datacenterguid=<>,parentdeviceguid=<>,cloudspaceguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of device guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.device.delete(deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Delete a device.

        
    
    

    h4.  Parameters
    

                * Deviceguid (guid) :             Guid of the device rootobject to delete.
                * Jobguid (guid) :                Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :        dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_device.delete(deviceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
