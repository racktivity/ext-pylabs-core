h2. XMLRPC Cloud API DOC - policy

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.policy.getXMLSchema(policyguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the os rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.policy.create(name, rootobjecttype, rootobjectaction, rootobjectguid, interval, runbetween, runnotbetween, policyparams, description, jobguid, executionparams)

    h4. Description
    
    
        Creates a new policy.

        
    
    

    h4.  Parameters
    

                * Name (string) :                      Name for the new policy
                * Rootobjecttype (string) :            RootObject type for the new policy
                * Rootobjectaction (string) :          Name of the action for the new policy
                * Rootobjectguid (string) :            Guid of the rootobject for the new policy
                * Interval (int) :                  Interval for the new policy
                * Runbetween (list) :                List of tuples with timestamps when a policy can run
                * Runnotbetween (string) :             List of tuples with timestamps when a policy can not run
                * Policyparams (string) :              Params for the new policy
                * Description (string) :               Description for the new policy
                * Jobguid (guid) :                   Guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.create(name=<string>,rootobjecttype=<string>,rootobjectaction=<string>,rootobjectguid=<string>,interval=<int>,runbetween=<list>,runnotbetween=<string>,policyparams=<string>,description=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary with policyguid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.policy.list(policyguid, name, rootobjectaction, rootobjecttype, status, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of all policies depending on passed filters.

        
    
    

    h4.  Parameters
    

                * Policyguid () :                    Guid of the cloudspace
                * Name () :                          Name of the policy
                * Rootobjectaction () :              Action on the rootobject
                * Rootobjecttype () :                Rootobject type e.g. sso
                * Status () :                        Status of the policy
                * Jobguid () :                       guid of the job if avalailable else empty string
                * Executionparams () :               dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.list(policyguid=<>,name=<>,rootobjectaction=<>,rootobjecttype=<>,status=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with array of operating system info as result and jobguid: {'result': array, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.policy.getYAML(policyguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the policy rootobject.

        
    
    

    h4.  Parameters
    

                * Policyguid (guid) :               guid of the os rootobject
                * Jobguid (guid) :                  guid of the job if avalailable else empty string
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.getYAML(policyguid=<guid>,jobguid=<guid>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the os
Return type : string
    {noformat}
    h3.policy.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :      guid of the policy object
                * Jobguid () : <no description found>
                * Executionparams (dictionary) :     dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.policy.updateModelProperties(policyguid, name, description, lastrun, status, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of policy guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Policyguid () : <no description found>
                * Name (string) :                Name of the policy
                * Description (string) :         description of the policy
                * Lastrun (datetime) :             lastrun of the policy
                * Status (string) :              Status for the policy
                * Jobguid (guid) :             guid of the job if avalailable else empty string
                * Executionparams (dictionary) :     dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.updateModelProperties(policyguid=<>,name=<string>,description=<string>,lastrun=<datetime>,status=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.policy.getXML(policyguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the os rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.policy.find(name, description, rootobjecttype, rootobjectaction, rootobjectguid, interval, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of policy guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Name (string) :                Name of the policy
                * Description (string) :         description of the policy
                * Rootobjecttype (string) :      Rootobject type.
                * Rootobjectaction (string) :    Action to execute on the rootobject
                * Rootobjectguid (string) :      Guid of the rootobject
                * Interval (int) :            Interval in seconds
                * Jobguid (guid) :             guid of the job if avalailable else empty string
                * Executionparams (dictionary) :     dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.find(name=<string>,description=<string>,rootobjecttype=<string>,rootobjectaction=<string>,rootobjectguid=<string>,interval=<int>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with an array of policy guids as result and jobguid: {'result': array, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.policy.delete(policyguid, jobguid, executionparams)

    h4. Description
    
    
        Deletes the given policy.

        
    
    

    h4.  Parameters
    

                * Policyguid (guid) :                Guid of the policy to delete.
                * Jobguid (guid) :                   Guid of the job if available else empty string
                * Executionparams (dictionary) :           dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_policy.delete(policyguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
