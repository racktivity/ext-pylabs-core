h2. XMLRPC Cloud API DOC - backplane

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.backplane.listLans(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        List of all related lans to the backplane.

        
    
    
        {note} Not yet implemented {note}
    h3.backplane.getXMLSchema(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the backplane rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.backplane.create(name, backplanetype, description, publicflag, managementflag, storageflag, jobguid, executionparams)

    h4. Description
    
    
        Create a new backplane.

        
    
    

    h4.  Parameters
    

                * Name (string) :                    Name for the backplane.
                * Backplanetype (string) :           Type of the backplane (ETHERNET, INFINIBAND)
                * Description (string) :             Description for the backplane.
                * Publicflag (boolean) :              Indicates if the backplane is a public backplane.
                * Managementflag (boolean) :          Indicates if the backplane is a management backplane.
                * Storageflag (boolean) :             Indicates if the backplane is a storage backplane.
                * Jobguid (guid) :                 Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.create(name=<string>,backplanetype=<string>,description=<string>,publicflag=<boolean>,managementflag=<boolean>,storageflag=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with backplaneguid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.backplane.list(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        List all backplanes.

        
    
    

    h4.  Parameters
    

                * Backplaneguid () :            Guid of the backplane
                * Jobguid () :                  Guid of the job if avalailable else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.list(backplaneguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with array of backplane info as result and jobguid: {'result': array, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.backplane.getYAML(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the backplane rootobject.

        
    
    

    h4.  Parameters
    

                * Backplaneguid (guid) :     Guid of the backplane rootobject
                * Jobguid (guid) :           Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :   dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.getYAML(backplaneguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the backplane
Return type : string
    {noformat}
    h3.backplane.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :     Guid of the lan rootobject
                * Jobguid () : <no description found>
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.getObject(rootobjectguid=<guid>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.backplane.updateModelProperties(backplaneguid, name, description, jobguid, executionparams)

    h4. Description
    
    
        Update basic properties (every parameter which is not passed or passed as empty string is not updated)

        
    
    

    h4.  Parameters
    

                * Backplaneguid (guid) :           Guid of the backplane specified
                * Name (string) :                    Name for this backplane
                * Description (string) :             Description for this backplane
                * Jobguid (guid) :                 Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.updateModelProperties(backplaneguid=<guid>,name=<string>,description=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with backplane guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.backplane.setFlags(backplaneguid, publicflag, managementflag, storageflag, jobguid, executionparams)

    h4. Description
    
    
        Sets the role flags for the specified backplane.

        
    
    

    h4.  Parameters
    

                * Backplaneguid (guid) :           Guid of the backplane
                * Publicflag (boolean) :              Defines if the backplane is used as a public backplane. Not modified if empty.
                * Managementflag (boolean) :          Defines if the backplane is used as a management backplane. Not modified if empty.
                * Storageflag (boolean) :             Defines if the backplane is used as a storage backplane. Not modified if empty.
                * Jobguid (guid) :                 Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.setFlags(backplaneguid=<guid>,publicflag=<boolean>,managementflag=<boolean>,storageflag=<boolean>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.backplane.getXML(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the backplane rootobject.
        
        
    
    
        {note} Not yet implemented {note}
    h3.backplane.find(name, managementflag, publicflag, storageflag, backplanetype, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of backplane guids which met the find criteria.
        
        
    
    

    h4.  Parameters
    

                * Name () :                     Name of the backplanes to include in the search criteria.
                * Managementflag () :           managementflag of the backplanes to include in the search criteria.
                * Publicflag () :               publicflag of the backplanes to include in the search criteria.
                * Storageflag () :              storageflag of the backplanes to include in the search criteria.
                * Backplanetype () :            Type of the backplanes to include in the search criteria.
                * Jobguid () :                  Guid of the job if avalailable else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.find(name=<>,managementflag=<>,publicflag=<>,storageflag=<>,backplanetype=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of backplane guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.backplane.listResourcegroups(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        List of all related resourcegroups to the backplane.

        
    
    
        {note} Not yet implemented {note}
    h3.backplane.delete(backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Delete a backplane.

        
    
    

    h4.  Parameters
    

                * Backplaneguid (guid) :           Guid of the backplane rootobject to delete.
                * Jobguid (guid) :                 Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :         dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_backplane.delete(backplaneguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
