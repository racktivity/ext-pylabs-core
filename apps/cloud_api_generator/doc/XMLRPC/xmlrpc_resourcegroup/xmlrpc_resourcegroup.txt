h2. XMLRPC Cloud API DOC - resourcegroup

*Index :*

{toc:minLevel=3|maxLevel=3}

    h3.resourcegroup.removeDevice(resourcegroupguid, deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Removes an existing device from the resource group specified.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :            Guid of the resource group specified
                * Deviceguid (guid) :                   Guid of the device to remove from the resource group specified
                * Jobguid (guid) :                      Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :              dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.removeDevice(resourcegroupguid=<guid>,deviceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.getXMLSchema(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XSD format of the resource group rootobject structure.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.addBackplane(resourcegroupguid, backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Add an existing backplane to the resource group specified.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :    Guid of the resource group specified
                * Backplaneguid (guid) :        Guid of the backplane to add to the resource group specified
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.addBackplane(resourcegroupguid=<guid>,backplaneguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.addDevice(resourcegroupguid, deviceguid, jobguid, executionparams)

    h4. Description
    
    
        Adds an existing device to the resource group specified.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :            Guid of the resource group specified
                * Deviceguid (guid) :                   Guid of the device to add to the resource group specified
                * Jobguid (guid) :                      Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :              dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.addDevice(resourcegroupguid=<guid>,deviceguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.list(datacenterguid, resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of resource groups which are related to the customer specified.

        
    
    

    h4.  Parameters
    

                * Datacenterguid () :       Guid of the datacenter to which this resource group is related
                * Resourcegroupguid () :    Guid of the resource group specified
                * Jobguid () :              Guid of the job if avalailable else empty string
                * Executionparams () :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.list(datacenterguid=<>,resourcegroupguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Dictionary of array of dictionaries with customerguid, and an array of resource groups with resourcegroupguid, datacenterguid, name, description.
Return type : dictionary
    {noformat}
    h3.resourcegroup.updateModelPropertiesAdvanced(resourcegroupguid, datacenterguid, jobguid, executionparams)

    h4. Description
    
    
        Update basic properties, every parameter which is not passed or passed as empty string is not updated.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :    Guid of the resource group specified
                * Datacenterguid (guid) :       Guid of the datacenter to which this resource group is related
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.updateModelPropertiesAdvanced(resourcegroupguid=<guid>,datacenterguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with resource group guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.getYAML(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in YAML format of the resource group rootobject.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :   Guid of the resource group rootobject
                * Jobguid (guid) :             Guid of the job if avalailable else empty string
                * Executionparams () : <no description found>
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.getYAML(resourcegroupguid=<guid>,jobguid=<guid>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : YAML representation of the resource group
Return type : string
    {noformat}
    h3.resourcegroup.getObject(rootobjectguid, jobguid, executionparams)

    h4. Description
    
    
        Gets the rootobject.

        
    
    

    h4.  Parameters
    

                * Rootobjectguid (guid) :     Guid of the lan rootobject
                * Jobguid (guid) :            Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :    dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.getObject(rootobjectguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : rootobject
Return type : string
    {noformat}
    h3.resourcegroup.listMachines(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of machines which are related to the resourcegroup specified.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.updateModelProperties(resourcegroupguid, name, description, jobguid, executionparams)

    h4. Description
    
    
        Update basic properties, every parameter which is not passed or passed as empty string is not updated.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :    Guid of the resource group specified
                * Name (string) :                 Name for this resource group
                * Description (string) :          Description for this resource group
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.updateModelProperties(resourcegroupguid=<guid>,name=<string>,description=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with resource group guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.listCustomers(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of customers which are related to the resourcegroup specified.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.listBackplanes(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of backplanes which are related to the resourcegroup specified.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.removeBackplane(resourcegroupguid, backplaneguid, jobguid, executionparams)

    h4. Description
    
    
        Removes an existing backplane from the resource group specified.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :    Guid of the resource group specified
                * Backplaneguid (guid) :        Guid of the backplane to remove from the resource group specified
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.removeBackplane(resourcegroupguid=<guid>,backplaneguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.getXML(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Gets a string representation in XML format of the resource group rootobject.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.listDevices(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of devices which are related to the resourcegroup specified.

        
    
    
        {note} Not yet implemented {note}
    h3.resourcegroup.create(datacenterguid, name, description, jobguid, executionparams)

    h4. Description
    
    
        Creates a new resource group

        
    
    

    h4.  Parameters
    

                * Datacenterguid (guid) :       Guid of the datacenter to which this resource group is related
                * Name (string) :                 Name for this new resource group
                * Description (string) :          Description for this new resource group
                * Jobguid (guid) :              Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :      dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.create(datacenterguid=<guid>,name=<string>,description=<string>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with resource group guid as result and jobguid: {'result': guid, 'jobguid': guid}
Return type : dictionary
    {noformat}
    h3.resourcegroup.find(name, description, datacenterguid, jobguid, executionparams)

    h4. Description
    
    
        Returns a list of resource groups guids which met the find criteria.

        
    
    

    h4.  Parameters
    

                * Name () :                     Name of the resource group to include in the search criteria.
                * Description () :              Description for this new resource group
                * Datacenterguid () :           Guid of the datacenter to which this resource group is related
                * Jobguid () :                  Guid of the job if avalailable else empty string
                * Executionparams () :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.find(name=<>,description=<>,datacenterguid=<>,jobguid=<>,executionparams=<>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : Array of resource group guids which met the find criteria specified.
Return type : array
    {noformat}
    h3.resourcegroup.delete(resourcegroupguid, jobguid, executionparams)

    h4. Description
    
    
        Deletes the resource group specified.

        
    
    

    h4.  Parameters
    

                * Resourcegroupguid (guid) :        Guid of the resource group to delete.
                * Jobguid (guid) :                  Guid of the job if avalailable else empty string
                * Executionparams (dictionary) :          dictionary of job specific params e.g. userErrormsg, maxduration ...
    
    h4. Python Example
    

            
            
            
    
    {code}
    import xmlrpclib
   
    xmlrpcProxy = xmlrpclib.ServerProxy('http://<name>:<password>@<environment url>:<port number>/appserver/xmlrpc)
    result=xmlrpcProxy.cloud_api_resourcegroup.delete(resourcegroupguid=<guid>,jobguid=<guid>,executionparams=<dictionary>))['result']
    {code}
        
    
    h4. Return
    
    {noformat:nopanel=true}
Return result : dictionary with True as result and jobguid: {'result': True, 'jobguid': guid}
Return type : dictionary
    {noformat}
