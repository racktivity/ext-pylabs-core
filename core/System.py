# <License type="Sun Cloud BSD" version="2.2">
#
# Copyright (c) 2005-2009, Sun Microsystems, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. Neither the name Sun Microsystems, Inc. nor the names of other
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SUN MICROSYSTEMS, INC. "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SUN MICROSYSTEMS, INC. OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# </License>

'''General system management methods'''

import os, sys, shutil, fnmatch, select, re, subprocess

try:
    import pwd
except:
    if sys.platform.startswith('win'):
        pass
    else:
        raise "python module pwd is not supported on this platform, please fix the dependency"
import time,socket,random,tempfile
import pylabs
from pylabs.enumerators import PlatformType
from pylabs.Vars import Vars
from pylabs.system.fs import SystemFS
from pylabs.system.net import SystemNet
from pylabs.system.process import SystemProcess
if sys.platform.startswith('win'):
    from pylabs.system.windows import WindowsSystem
else:
    from pylabs.system.unix import UnixSystem

from pylabs.system.fswalker import FSWalker

try:
    from functools import wraps
except ImportError:
    def wraps(f):
        return f

def _wrap_deprecated_fs(f):
    @wraps(f)
    def wrapper(self, *args, **kwargs):
        #By the end of May (says Jochen) this should become
        #raise DeprecationWarning
        pylabs.q.logger.log('Using deprecated method %s on System' % f.__name__, 5)
        s = SystemFS()
        return f(s, *args, **kwargs)
    return wrapper

def _wrap_deprecated_net(f):
    @wraps(f)
    def wrapper(self, *args, **kwargs):
        #By the end of May (says Jochen) this should become
        #raise DeprecationWarning
        pylabs.q.logger.log('Using deprecated method %s on System' % f.__name__, 5)
        s = SystemNet()
        return f(s, *args, **kwargs)
    return wrapper

def _wrap_deprecated_process(f):
    @wraps(f)
    def wrapper(self, *args, **kwargs):
        #By the end of May (says Jochen) this should become
        #raise DeprecationWarning
        pylabs.q.logger.log('Using deprecated method %s on System' % f.__name__, 5)
        s = SystemProcess()
        return f(s, *args, **kwargs)
    return wrapper


class System:
    #pylabs internal object
    #TODO DOTARRAY and PLUSARRAY seem to be unreferenced, can they be dropped?
    __DOTARRAY = [" ", ". ", ".. ", "... "]
    __PLUSARRAY = [" ", "+ ", "++ ", "+++ "]
    # Singleton state
    __shared_state = {}
    '''Singleton-like shared state

    @type: dict
    '''

    _currentActionDescription=""
    '''Description of the currently running action

    @type: string
    '''

    _currentActionErrorMessage=""
    '''Error message generated by the currently running action

    @type: string
    '''

    _currentActionResolutionMessage=""
    _currentActionStatus=""
    '''Status of the currently running action

    @type: string
    '''

    _currentActionLevel=0
    '''Level of the currently running action

    @type: number
    '''

    _verbosityLevel=2
    '''Verbosity level

    @type: number
    '''

    _qPlatformType=None
    '''PlatformType of currently running platform

    @type: L{pylabs.enumerators.PlatformType.PlatformType}
    '''

    fswalker = FSWalker
    '''Accessor to FSWalker functionality'''

    # Initialize singleton object
    def __init__(self):
        '''Initializes a new System instance

        Binds currently running L{pylabs.enumerators.PlatformType.PlatformType}
        and initializes the C{fs}, C{net} and C{process} attributes.
        '''
        self._qPlatformType=PlatformType.findPlatformType()

        self.fs = SystemFS()
        self.net = SystemNet()
        self.process = SystemProcess()
        if sys.platform.startswith('win'):
            self.windows = WindowsSystem()
        else:
            self.unix = UnixSystem()