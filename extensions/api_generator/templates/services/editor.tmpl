from pylabs import q, p
from actionservice import ActionService
from alkira import Alkira

TASKLETS = ('impl/ui/form',
            'impl/ui/wizard')
            
class editor(ActionService):
    def list2jstree(self, appname, path, items, isdir=False):
        result = list()
        for item in items:
            dirfullname = q.system.fs.joinPaths(path, item)
            if dirfullname.startswith("./"):
                dirfullname = dirfullname[2:]
            data = dict()
            data["state"] = "closed" if isdir else "leaf"
            data["data"] = {"children": [],
                            "title": item,
                            "attr":{"href": "#"}
                           }
            data["attr"] = { "class":"TreeTitle", "id":dirfullname }
            result.append(data)
        return result
    
    #This function make sure the path doesn't try to access parent items like appname/../../../../etc/
    def checkPath(self, path):
        if path.startswith("..") or path.startswith("/"):
            return False
        if path.find("/..") > 0:
            return False
        return True
    
    @q.manage.applicationserver.expose
    def listPyApps(self, jobguid = "", executionparams = None):
        """        
        list all available applications

        @execution_method = sync

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:                 list of application names
        @rtype:                  list
        """
        currentapp = p.api.appname
        applist = q.system.fs.listDirsInDir(q.dirs.pyAppsDir, dirNameOnly=True)
        #I want to make current app the first in the list
        idx = applist.index(currentapp)
        if idx > 0:
            applist[idx], applist[0] = applist[0], applist[idx]
        return applist
    
    @q.manage.applicationserver.expose
    def listSpaces(self, appname, jobguid = "", executionparams = None):
        """        
        list all available spaces

        @execution_method = sync

        @param appname:   name of the application
        @type appname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:                 list of space names
        @rtype:                  list
        """
        if not self.checkPath(appname):
            return None
        return q.system.fs.listDirsInDir(q.system.fs.joinPaths(q.dirs.pyAppsDir, appname, "portal/spaces/"), dirNameOnly=True)
    
    @q.manage.applicationserver.expose
    def listFilesInDir(self, appname, id = ".", jobguid = "", executionparams = None):
        """        
        list all files in a specific directory
        
        @execution_method = sync
        
        @param appname:   name of the application
        @type appname:    string
        
        @param dirname:   name of the direcotry relative to the application path
        @type dirname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:                 list of files in the directory "dirname"
        @rtype:                  list
        """
        alkira = Alkira(p.api)
        dirname = id
        if not self.checkPath(appname) or not self.checkPath(dirname):
            raise ValueError("invalid characters in the application name or path (.. or /) were detected")
        
        rpath = q.system.fs.joinPaths(appname, dirname)
        abspath = q.system.fs.joinPaths(q.dirs.pyAppsDir, rpath)
        lenpath = len(abspath)
        files = list()
        for item in q.system.fs.listFilesInDir(abspath):
            filename = item[lenpath + 1:]
            files.append((filename, alkira._getType(filename)))
        
        return {"path":rpath, "files": files}
    
    @q.manage.applicationserver.expose
    def listDirsInDir(self, appname, id = ".", jobguid = "", executionparams = None):
        """        
        list all directories in a specific directory
        
        @execution_method = sync
        
        @param appname:   name of the application
        @type appname:    string
        
        @param dirname:   name of the direcotry relative to the application path
        @type dirname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:          list of directories in the directory "dirname"
        @rtype:           list
        """
        dirname = id
        if not self.checkPath(appname) or not self.checkPath(dirname):
            raise ValueError("invalid characters in the application name or path (.. or /) were detected")
        path = q.system.fs.joinPaths(q.dirs.pyAppsDir, appname, dirname)
        result = q.system.fs.listDirsInDir(path, dirNameOnly=True)
        return self.list2jstree(appname, dirname, result, True)
        
    @q.manage.applicationserver.expose
    def importProject(self, appname, projectname, source, jobguid = "", executionparams = None):
        """
        Import directory "source" path should be relative to the directory of application "appname"
        
        @execution_method = sync
        
        @param appname:   name of the application
        @type appname:    string

        @param source:   name of the source direcotry relative to the application path
        @type source:    string

        @param projectname:   name of the project
        @type projectname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:          list of directories in the directory "dirname"
        @rtype:           list
        """
        join = q.system.fs.joinPaths
        if not self.checkPath(appname) or not self.checkPath(projectname) or not self.checkPath(source):
            raise ValueError("invalid characters in the application name, project name  or source (.. or initial /) were detected")
        
        dest = join(q.dirs.pyAppsDir, appname, "portal", "spaces", "Imported", projectname)
        if q.system.fs.exists(dest):
            raise ValueError("Project %s already exists,\nplease choose a different name or remove the porject"%projectname);
        
        source = join(q.dirs.pyAppsDir, appname, source)
        if not q.system.fs.isDir(source):
            raise ValueError("%s doesn't exists or not a directory"%source);
        
        if dest.startswith(source):
            raise ValueError("You can't import any directory that contains the directory portal/spaces/Imported/")
        
        if not q.manage.applicationserver.isRunning(appname):
            raise Exception("Applicationserver for %s is not running\ntry q.manage.applicationserver.restart('%s')"%(appname, appname))
        
        q.system.fs.createDir(dest)
        q.system.fs.copyDirTree(source, dest)
        alkira = Alkira(p.api)
        spaceguid = alkira.getSpace("Imported").guid
        
        destlen = len(dest)
        for fullfilename in q.system.fs.walk(dest, recurse=True, followSoftlinks=True):
            #convert it to relative path
            filename = fullfilename[destlen + 1:]
            filetype =  alkira._getType(filename)
            #should I store this file in alkira?
            if not filetype:
                continue
            alkira.createPage(spaceguid, join(projectname, filename), fullfilename, category='imported', parent="Home", filename=source, contentIsFilePath=True, pagetype=filetype)
        
        return True
    
    def _guessExportDest(self, projectname):
        page = None
        alkira = Alkira(p.api)
        con = p.api.model.ui
        result = con.page.query("SELECT name FROM ui_page.ui_view_page_list where name like '" + projectname + "/%'")
        samplepage = None
        for row in result:
            pagename = row["name"]
            page = alkira.getPage("Imported", pagename)
            if page.filename:
                samplepage = page
                break
        if not samplepage:
            raise Exception("Unable to determine destination")
        
        return samplepage.filename
        
        
    @q.manage.applicationserver.expose
    def exportFile(self, pagename, oldpagename=None, jobguid = "", executionparams = None):
        if pagename == 'Home':
            return
        if not pagename.count('/'):
            raise RuntimeError("Invalid pagename")
        
        projectname = pagename.split('/')[0]
        alkira = Alkira(p.api)
        page = alkira.getPage("Imported", pagename)
        dest = page.filename
        if not dest:
            dest = self._guessExportDest(projectname)
        
        justname = lambda x: x.replace("%s/" % projectname, '', 1)
        
        j = q.system.fs.joinPaths
        if oldpagename and oldpagename != pagename:
            q.system.fs.removeFile(j(dest, justname(oldpagename)))
        
        filepath = j(dest, justname(pagename))
        q.system.fs.writeFile(filepath, page.content)
        
        for tdir in TASKLETS:
            tdir = j(q.dirs.pyAppsDir, p.api.appname, tdir)
            if filepath.startswith(tdir):
                q.system.fs.createEmptyFile(j(tdir, "tasklets_updated"))
                
    @q.manage.applicationserver.expose
    def deleteFile(self, pagename, jobguid = "", executionparams = None):
        if pagename == 'Home':
            return
        if not pagename.count('/'):
            raise RuntimeError("Invalid pagename")
        
        projectname = pagename.split('/')[0]
        alkira = Alkira(p.api)
        dest = self._guessExportDest(projectname)
        
        justname = lambda x: x.replace("%s/" % projectname, '', 1)
        q.system.fs.removeFile(q.system.fs.joinPaths(dest, justname(pagename)))
        
    @q.manage.applicationserver.expose
    def exportProject(self, appname, projectname, dest = "", jobguid = "", executionparams = None):
        """
        Export files to directory "dest", if dest was not set 
        
        @execution_method = sync
        
        @param appname:   name of the application
        @type appname:    string

        @param dest:   destination, if set it will simply copy the project's contents to this directory
        @type dest:    string

        @param projectname:   name of the project
        @type projectname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:          list of directories in the directory "dirname"
        @rtype:           list
        """
        if not self.checkPath(appname) or not self.checkPath(projectname) or not self.checkPath(dest):
            raise ValueError("invalid characters in the application name, project name  or dest (.. or initial /) were detected")
        
        join = q.system.fs.joinPaths
        
        #gussing the dest, this very bad and must be changed in the future
        if not dest:
            dest = self._guessExportDest(projectname)
        
        src = join(q.dirs.pyAppsDir, appname, "portal", "spaces", "Imported", projectname)
        q.system.fs.removeDirTree(dest)
        q.system.fs.copyDirTree(src, dest)
        return True

    @q.manage.applicationserver.expose
    def deleteProject(self, appname, projectname, jobguid = "", executionparams = None):
        """
        Delete all files/data related to a specific project 
        
        @execution_method = sync
        
        @param appname:   name of the application
        @type appname:    string

        @param projectname:   name of the project
        @type projectname:    string

        @param jobguid:          guid of the job if available else empty string
        @type jobguid:           guid

        @param executionparams:  dictionary of job specific params e.g. userErrormsg, maxduration ...
        @type executionparams:   dictionary
        
        @return:          list of directories in the directory "dirname"
        @rtype:           list
        """
        if not self.checkPath(appname) or not self.checkPath(projectname):
            raise ValueError("invalid characters in the application name, project name (.. or initial /) were detected")
        
        join = q.system.fs.joinPaths
        conn = p.application.getOsisConnection(appname)
        alkira = Alkira(p.api)
        result = conn.runQuery("SELECT name FROM ui_page.ui_view_page_list where name like '" + projectname + "%/'")
        samplepage = None
        for row in result:
            pagename = row["name"]
            alkira.deletePage("Imported", pagename)
        #remove the directory
        src = join(q.dirs.pyAppsDir, appname, "portal", "spaces", "Imported", projectname)
        q.system.fs.removeDirTree(src)
        return True
