import os.path 
import functools    
import pkg_resources   

dirname = os.path.dirname(__file__)
path = os.path.abspath(dirname)
pyapp = os.path.abspath(os.path.join(path, '..', '..'))

tasklet_path = os.path.join(pyapp, 'impl', 'osis')

import pymodel
def list_():
    base = os.path.join(pyapp, 'interface')

    for modeltype in 'model', 'config', 'monitoring':
        path_ = os.path.join(base, modeltype)

        if not os.path.isdir(path_):
            continue

        subdirs = ((entry, os.path.join(path_, entry))
            for entry in os.listdir(path_)
            if os.path.isdir(os.path.join(path_, entry)))

        for (name, subdir) in subdirs:
            models = pymodel.load_models(subdir)

            for model in models:
                yield ((modeltype, name, model.__name__), model)

from osis.server.applicationserver import OsisServer

class PatchedOsisServer(OsisServer):
    def __init__(self, *args, **kwargs):
        OsisServer.__init__(self, *args, **kwargs)

        orig_execute = self.tasklet_engine.execute

        def execute(**kwargs):
            params = kwargs.pop('params', None)
            params = params if params is not None else {}

            if 'rootobjecttype' in params and len(params['rootobjecttype']) == 3:
                category, domain, rootobjecttype = params['rootobjecttype']

                params.update({
                    'category': category,
                    'domain': domain,
                    'rootobjecttype': rootobjecttype,
                })

            kwargs['params'] = params

            return orig_execute(**kwargs)

        self.tasklet_engine.execute = execute

osissvc = functools.partial(PatchedOsisServer, tuple(list_()),
    tasklet_path=tasklet_path)
