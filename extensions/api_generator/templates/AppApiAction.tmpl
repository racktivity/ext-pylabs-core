from pylabs import q, p

class ${className}(object):
    
    def __init__(self, proxy=None):
        self._proxy = proxy or ${className}ActionManagerProxy()
                
#for $method in $methods:
    def $method.name (self, $method.args):
        """
        $method.docs
        """        
        if executionparams is None:
            executionparams = dict()
#set $line = ','.join($method.argNames)
        result = self._proxy('$domain', '$className', '$method.name', $line)
#if $method.name == 'getObject'
        # Deserialize the pymodel object
        o = result['result']
        if isinstance(o, basestring):
            import base64
            from pymodel.serializers import ThriftSerializer
            decoded_o = base64.decodestring(o)
            # FIXME hack
            api = p.application.getAPI("${appname}", context=q.enumerators.AppContext.APPSERVER)
#if $isconfig
            type_class = api.config.${domain}.${className}._ROOTOBJECTTYPE
#else
            type_class = api.model.${domain}.${className}._ROOTOBJECTTYPE
#end if
            deserialized_o = ThriftSerializer.deserialize(type_class, decoded_o)
            return deserialized_o
        else:
            return result['result']
#else
        return result
#end if
#end for

class ${className}ActionManagerProxy(object):
    def __call__(self, domainname, classname, methodname, *args):        
        try:
            m = getattr(self,  methodname)
            return m(*args)
        except AttributeError, ae:
            raise 
        except Exception, e:
            raise
         
    
#for $method in $methods:
    def $method.name (self, $method.args):
        """
        $method.docs
        """
        params = dict()
        
#for $key, $value in $method.params.iteritems():
        params['$key'] = $value
#if $key == $className+'guid'
        executionparams['rootobjectguid'] = $value
#end if
#end for
        executionparams['rootobjecttype'] = '$className'
#for $key in  $method.properties.keys()
    #if $key.startswith('execution_param_')
        #set param_name = $key.split('_')[-1]
        if not '$param_name' in executionparams:  executionparams['$param_name'] = $method.properties[$key]
    #end if
#end for

        
#if 'execution_method' in $method.properties and $method.properties.execution_method == 'async'
        return q.workflowengine.actionmanager.startRootobjectActionAsynchronous('$domain', '$className', '$method.name', params, jobguid=jobguid, executionparams=executionparams)
#elif 'execution_method' in $method.properties and $method.properties.execution_method == 'sync'
        return q.workflowengine.actionmanager.startRootobjectActionSynchronous('$domain', '$className', '$method.name', params, jobguid=jobguid, executionparams=executionparams)
#else
        return q.workflowengine.actionmanager.startRootobjectAction('$domain', '$className', '$method.name', params, jobguid=jobguid, executionparams=executionparams)
#end if

    

#end for
