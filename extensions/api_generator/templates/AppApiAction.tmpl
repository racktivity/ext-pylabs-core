from pylabs import q, p

class ${className}(object):

    def __init__(self):
        self.__te = None

    # lazy load taskletengine
    @property
    def _taskletengine(self):
        if self.__te is None:
            self.__te = q.taskletengine.get(q.system.fs.joinPaths(q.dirs.pyAppsDir, '${appname}', 'impl', 'action', '$domain', '$className'))

            # small hack to set the right tags
            for tasklet in self.__te._tasklets.itervalues():
                tags = tasklet.tags.pop()
                tags = tuple(sorted(('$domain', '$className') + tags))
                tasklet.tags.add(tags)
        return self.__te

#for $method in $methods:
    def $method.name (self, $method.args):
        """
        $method.docs
        """
        params = dict()
        if executionparams is None:
            executionparams = dict()


#for $key, $value in $method.params.iteritems():
        params['$key'] = $value
    #if $key == $className+'guid'
        executionparams['rootobjectguid'] = $value
    #end if
#end for
        if hasattr(p, "request_context") and hasattr(p.request_context, "username") and p.request_context.username:
            audit_username = p.request_context.username
            audit_clientip = p.request_context.ipaddress
        else:
            audit_username = "anonymous"
            audit_clientip = "localhost"
        params['request'] = { 'username': audit_username, 'ipaddress': audit_clientip }
        executionparams['rootobjecttype'] = '$className'
#for $key in  $method.properties.keys()
    #if $key.startswith('execution_param_')
        #set param_name = $key.split('_')[-1]
        if not '$param_name' in executionparams:  executionparams['$param_name'] = $method.properties[$key]
    #end if
#end for
        params["jobguid"] = None

        self._taskletengine.execute(params, tags=('$domain', '$className', '$method.name'))
        result = { 'jobguid': None, 'result': params.get('result') }

#if $method.name == 'getObject'
        # Deserialize the pymodel object
        o = result['result']
        if isinstance(o, basestring):
            import base64, pymodel
            from pymodel.serializers import ThriftSerializer
            decoded_o = base64.decodestring(o)

#if $isconfig
            modpath = q.system.fs.joinPaths(q.dirs.baseDir, 'pyapps', '${appname}', 'interface', 'config', '$domain')
#else
            modpath = q.system.fs.joinPaths(q.dirs.baseDir, 'pyapps', '${appname}', 'interface', 'model', '$domain')
#end if
            models = pymodel.load_models(modpath)
            for model in models:
                if model.__name__ == '$className':
                    deserialized_o = ThriftSerializer.deserialize(model, decoded_o)
                    return deserialized_o
            raise RuntimeError('Failed to load the model for %s in %s' % ('$className', modpath))
        else:
            return result['result']
#else
        return result
#end if

#end for
